<?php

namespace Tests\Feature;

use App\Models\Plan;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Stripe\Stripe;
use Tests\traits\InteractsWithStripe;
use Tests\TestCase;

class SubscriptionTest extends TestCase
{

    use RefreshDatabase, InteractsWithStripe;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->stripe = new \Stripe\StripeClient(config('services.stripe.secret'));
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testSubscribesAUser()
    {

        $user = $this->makeSubscribedUser([
            'subscription_active' => false
        ]);

        $this->assertTrue($user->fresh()->isActive());

        // Recupero la subscription da stripe, se non esiste viene sollevata un eccezzione
        try{
            $subscription = $user->subscription()->retrieve();
        }catch (\Exception $e){
            $this->fail($e->getMessage());
        }

        $this->cleanCustomer($user);
    }

    public function testItSubscribesAUserUsingAcouponCode()
    {

        $couponCode = 'FIRST-COUPON';

        $user = User::factory()->create();

        $user->subscription()->createCustomer();

        $subscription = $user->subscription()->usingCoupon($couponCode)->create($this->getPaymentMethod(), $this->getPlan());

        $this->assertEquals($couponCode, $subscription->latest_invoice->discount->coupon->id);

        $this->cleanCustomer($user);

    }

    public function testItCancelsAUsersSubscription()
    {
        $user = $this->makeSubscribedUser();

        $user->subscription()->cancel();

        $stripeSubscription = $user->subscription()->retrieve();

        $this->assertNotNull($stripeSubscription->canceled_at);
        $this->assertFalse($user->isSubscribed());
        $this->assertNotNull($user->subscription_end_at);
        $this->assertTrue($user->isActive());

        $this->cleanCustomer($user);
    }

    public function testItResumesASubscription()
    {

        $user = $this->makeSubscribedUser();

        $user->subscription()->cancel();

        $this->assertTrue($user->isActive());
        $this->assertTrue($user->isOnGracePeriod());

        $user->subscription()->resume();

        $this->assertTrue($user->isSubscribed());
        $this->assertFalse($user->isOnGracePeriod());

        $this->cleanCustomer($user);

    }

    protected function makeSubscribedUser($overrides = [])
    {
        $user = User::factory()->create($overrides);

        $user->subscription()->createCustomer();

        $user->subscription()->create($this->getPaymentMethod(), $this->getPlan());

        return $user;
    }

    protected function cleanCustomer($user)
    {
        $user->subscription()->deleteCustomer();
    }
}
